
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableRowSorter;

public class CardClass extends JFrame{
	
	JTable table;
	JLabel label;
	JComboBox<String> comboCountries;
	JScrollPane spane;
	JPanel panel;
	JButton aceptar,borrar;
	JCheckBox cbox;
	private TableRowSorter<MyTableModel> sorter;

	public CardClass() {
		//getContentPane().setFont(new Font(arg0, arg1, arg2));
		GridBagLayout bag = new GridBagLayout();
		GridBagConstraints constraints = new GridBagConstraints();
		this.setLayout(bag);
		
		/*
		 * CREAMOS EL PANEL
		 */
		panel = new JPanel();
		panel.setLayout(bag);
		
		/*
		 * CREAMOS LA TABLA
		 */
		MyTableModel model = new MyTableModel();
		sorter = new TableRowSorter<MyTableModel>(model);
		table = new JTable(model);
		table.setRowSorter(sorter);
		
		//DEFINIMOS EL TAMAÑO DE LA TABLA
		table.setPreferredScrollableViewportSize(new Dimension(500, 144));
		
		/*
		 * CREAMOS EL SCROLL PANEL
		 */
		spane = new JScrollPane(table);
		
		/*
		 * CREAMOS LA LABEL
		 */
		label = new JLabel("Escoger país");
		
		/*
		 * CREAMOS LOS BOTONES
		 */
		aceptar = new JButton("Aceptar");
		borrar = new JButton("Borrar");
		
		/*
		 * CREAMOS LOS CHECKBOX
		 */
		cbox = new JCheckBox();
		
		String[] countries = {"Todos","Spain","France","Germany","Italy"};
		comboCountries = new JComboBox<String>(countries);

		comboCountries.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				if((String)comboCountries.getSelectedItem() != "Todos"){
					newFilter();
				}else{
					removeFilter();
				}
			}
		});
		
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.insets = new Insets(5,20,0,20);
		panel.add(label,constraints);
		constraints.gridx = 0;
		constraints.gridy = 1;
		
		panel.add(comboCountries,constraints);
		constraints.gridx = 0;
		constraints.gridy = 2;
		constraints.insets = new Insets(30,20,10,20);
		panel.add(aceptar, constraints);
		constraints.gridx = 0;
		constraints.gridy = 3;
		constraints.ipadx = 10;
		constraints.insets = new Insets(0,20,0,20);
		panel.add(borrar, constraints);
		
		constraints.gridx = 0;
		constraints.gridy = 0;
		constraints.ipadx = 0;
		constraints.insets = new Insets(25,20,0,20);
		this.add(panel,constraints);
		constraints.insets = new Insets(20,20,20,20);
		constraints.gridx = 1;
		constraints.gridy = 0;
		constraints.gridheight = 2;
		this.add(spane,constraints);

		
		this.pack();
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setVisible(true);
	}
	
	/*
	 * CREAMOS EL FILTRO QUE APLICARÁ EL COMBOBOX
	 */
	private void newFilter() {
		RowFilter<MyTableModel, Object> rf = null;
	    try {
	      rf = RowFilter.regexFilter((String)comboCountries.getSelectedItem(),2);
	    } catch (java.util.regex.PatternSyntaxException e) {
	      return;
	    }
	    sorter.setRowFilter(rf);
	}

	private void removeFilter() {
	    sorter.setRowFilter(null);
	}
	
	class MyTableModel extends AbstractTableModel {
		private static final long serialVersionUID = 1L;
		private String[] colName = {"ID","Nombre","País","Stock"};
		private Object[][] data = {
			{"1","que","Spain","Hola"},
			{"2","que","France",""},
			{"3","que","Spain",""},
			{"4","que","Italy",""},
			{"5","que","Spain",""},
			{"6","que","Germany",""},
			{"7","que","Spain",""},
			{"8","que","France",""},
			{"9","que","Spain",""}
		};
		
		public boolean isCellEditable(int row, int col) {
			if (col < 3) {
	        	return false;
	    	}else{
	        	return true;
	        }
	    }
	    
		public void setValueAt(Object value, int row, int col) {
			data[row][col] = value;
	    }
	    
		public String getColumnName(int col){
			return colName[col];
		}
	    
	    @Override
	    public Object getValueAt(int row, int col) {
	    	
	    	if(col<3){
	    		return data[row][col];
	    	}else{
	    		return data[row][col];
	    	}
	      }
		@Override
		public int getColumnCount() {
			return colName.length;
		}
	
		@Override
		public int getRowCount() {
			return data.length;
		}
	    public Class getColumnClass(int col) {
	        return getValueAt(0, col).getClass();
	    }
	    
	    /*private void setAlignment(){
			for(int i=0;i<colName.length;i++){
				DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
				centerRenderer.setHorizontalAlignment( JLabel.CENTER );
				table.getColumnModel().getColumn(i).setCellRenderer( centerRenderer );
			}
		}*/
		 
	 }

	public static void main(String[] args) {
		new CardClass();

	}

}
